---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { CourseTracker } from "../../components/CourseTracker";
import { groupEntriesByModule } from "../../utils/groupEntries";
import { Track } from "../../data/tracks";

export async function getStaticPaths() {
  const substrateCourseEntries = await getCollection("substrate", ({ data }) => {
    return !data.draft;
  });
  const entries = substrateCourseEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
  return entries;
}

const styles = {
  body: "dark:bg-gray-900",
  nav: "flex bg-green justify-between h-12 items-center",
};

const substrateCourseEntries = await getCollection(Track.Substrate, ({ data }) => {
  return !data.draft;
});
const courseEntriesByModule = groupEntriesByModule(substrateCourseEntries);

const { entry } = Astro.props;

const moduleEntries = courseEntriesByModule[entry.data.module].entries;
const entryIndex = moduleEntries.findIndex(
  (moduleEntry) => moduleEntry.id === entry.id
);
const nextEntry =
  entryIndex === moduleEntries.length - 1
    ? courseEntriesByModule[entry.data.module + 1]?.entries[0]
    : moduleEntries[entryIndex + 1];

const { Content } = await entry.render();
---

<Layout title={entry.data.title} styles={styles}>
  <div class="lg:hidden md:px-14 px-5 md:my-10 my-5">
    <CourseTracker
      client:load
      module={entry.data.module}
      courseEntriesByModule={courseEntriesByModule}
      track={Track.Substrate}
    />
  </div>
  <div
    class="md:px-10 lg:grid lg:grid-cols-[20rem,2fr] lg:grid-rows-1 lg:mt-10"
  >
    <div class="lg:block hidden">
      <CourseTracker
        client:load
        module={entry.data.module}
        courseEntriesByModule={courseEntriesByModule}
        track={Track.Substrate}
      />
    </div>
    <main class="px-4 space-y-4 mb-10">
      <div class="content">
        <Content />
      </div>
      {
        nextEntry && (
          <>
            <a
              class:list={[
                "inline-block w-full border rounded border-black p-5 bg-green-light text-right",
                "dark:border-white dark:bg-green-dark hover:underline",
              ]}
              href={`/${nextEntry.collection}/${nextEntry.slug}`}
            >
              Siguiente p√°gina
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="w-6 h-6 inline"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"
                />
              </svg>
            </a>
          </>
        )
      }
    </main>
  </div>
</Layout>

<style is:global>
  h1 {
    @apply text-4xl sm:text-5xl;
  }
  h2 {
    @apply text-3xl sm:text-4xl;
  }
  p,
  li {
    @apply text-lg;
  }
  p {
    @apply my-3;
  }
  ul {
    @apply list-disc px-5;
  }
  .content ol {
    list-style: decimal;
    @apply px-5;
  }
  .content h1,h2,h3,h4 {
    @apply font-bold;
  }
  .content h1 {
    @apply text-4xl sm:text-5xl;
    @apply mt-12 mb-6 first:mt-0;
  }
  .content h2 {
    @apply text-3xl sm:text-4xl;
    @apply mt-8 mb-4;
  }
  .content h3 {
    @apply text-2xl sm:text-3xl;
    @apply mt-6 mb-4;
  }
  .content a {
    @apply text-green hover:underline;
  }
  .content ul {
    @apply mb-5;
  }
  .content {
    @apply mb-10;
    word-break: break-word;
  }
  .content code {
    @apply bg-[#0d1117] rounded p-1;
  }
  .content pre {
    @apply p-5 max-w-fit rounded mb-4;
  }
  .content pre code {
    @apply bg-transparent;
  }
</style>
